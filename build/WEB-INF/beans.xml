<?xml version="1.0" encoding="GBK"?>
<!-- Spring配置文件的根元素，使用spring-beans-3.0.xsd语义约束 -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://www.springframework.org/schema/beans"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">

	<!-- 1 -->
	<!-- 将PersonService类部署成Spring容器中的Bean -->
	<bean id="personService" class="com.webwalker.entity.PersonService">
		<property name="name" value="wawa" />
		<property name="a" value="ss" />
	</bean>

	<!-- 2 -->
	<!-- 配置chinese实例，其实现类是Chinese -->
	<bean id="chinese" class="com.webwalker.spring.impl.Chinese">
		<!-- 使用构造注入，为chinese实例注入steelAxe实例, index第几个构造参数 -->
		<constructor-arg ref="steelAxe" index="0" />
		<property name="axe" ref="steelAxe" />
		<property name="name" value="孙悟空" />
	</bean>
	<!-- 配置stoneAxe实例，其实现类是StoneAxe -->
	<bean id="stoneAxe" class="com.webwalker.spring.impl.StoneAxe" />
	<!-- 配置steelAxe实例，其实现类是SteelAxe -->
	<bean id="steelAxe" class="com.webwalker.spring.impl.SteelAxe" />

	<!-- 3 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<!-- <property name="basenames" value="com/webwalker/spring/resource"> -->
		<property name="basenames">
			<list>
				<value>com/webwalker/spring/resource/message</value>
				<!-- 如果有多个资源文件，全部列在此处 -->
			</list>
		</property>
	</bean>

	<!-- 4事件监听器 -->
	<bean class="com.webwalker.spring.listener.EmailNotifier" />

	<!-- 5 Bean获取Spring容器 -->
	<bean id="contextAware" class="com.webwalker.spring.impl.MyContextAware"></bean>

	<!-- 6作用域 -->
	<bean id="p1" class="com.webwalker.entity.PersonService" scope="prototype" />

	<!-- 7自动装配，根据BeanA中setter自动装配XML中的相关Bean -->
	<bean id="chineseWireByName" class="com.webwalker.spring.impl.Chinese"
		autowire="byName" />
	<!-- 不是唯一的，所以注释掉 -->
	<!-- <bean id="chineseWireByType" class="com.webwalker.spring.impl.Chinese" 
		autowire="byType" /> -->

	<!-- 8注入集合 -->
	<!-- 定义ChineseCollection Bean -->
	<bean id="chineseCollection" class="com.webwalker.spring.impl.ChineseCollection">
		<property name="schools">
			<!-- 为List属性配置属性值 -->
			<list>
				<!-- 每个value、ref、bean都配置一个List元素 -->
				<value>小学</value>
				<value>中学</value>
				<value>大学</value>
			</list>
		</property>
		<property name="scores">
			<!-- 为Map属性配置属性值 -->
			<map>
				<!-- 每个entry配置一个key-value对 -->
				<entry key="数学" value="87" />
				<entry key="英语" value="89" />
				<entry key="语文" value="82" />
			</map>
		</property>
		<property name="phaseAxes">
			<!-- 为Map属性配置属性值 -->
			<map>
				<!-- 每个entry配置一个key-value对 -->
				<entry key="原始社会" value-ref="stoneAxe" />
				<entry key="农业社会" value-ref="steelAxe" />
			</map>
		</property>
		<property name="health">
			<!-- 为Properties属性配置属性值 -->
			<!-- 每个prop元素配置一个属性项， 其中key指定属性名 -->
			<!-- props> <prop key="血压">正常</prop> <prop key="身高">175</prop> </props -->
			<value>
				pressure=normal
				height=175
			</value>
		</property>
		<property name="axes">
			<!-- 为Set属性配置属性值 -->
			<set>
				<!-- 每个value、ref、bean都配置一个Set元素 -->
				<value>普通的字符串</value>
				<bean class="com.webwalker.spring.impl.SteelAxe" />
				<ref local="stoneAxe" />
			</set>
		</property>
		<property name="books">
			<!-- 为数组属性配置属性值 -->
			<list>
				<!-- 每个value、ref、bean都配置一个数组元素 -->
				<value>Struts 2权威指南</value>
				<value>轻量级Java EE企业应用实战</value>
				<value>疯狂Java讲义</value>
			</list>
		</property>
	</bean>

	<!-- 9 静态工厂方法创建Bean -->
	<!-- 配置BeingFactory的getBeing方法产生dog Bean -->
	<bean id="dog" class="com.webwalker.spring.impl.BeingFactory"
		factory-method="getBeing">
		<!-- 配置静态工厂方法的参数 -->
		<constructor-arg value="dog" />
		<!-- property配置普通依赖注入属性 -->
		<property name="msg" value="我是狗" />
	</bean>
	<!-- 配置BeingFactory的getBeing方法产生dog Bean -->
	<bean id="cat" class="com.webwalker.spring.impl.BeingFactory"
		factory-method="getBeing">
		<!-- 配置静态工厂方法的参数 -->
		<constructor-arg value="cat" />
		<!-- property配置普通依赖注入属性 -->
		<property name="msg" value="我是猫" />
	</bean>

	<!-- 10工厂方法创建Bean -->
	<!-- 配置工厂Bean,该Bean负责产生其他Bean实例 -->
	<bean id="personFactory" class="com.webwalker.spring.impl.PersonFactory" />
	<!-- 采用实例工厂创建Bean实例，factory-bean指定工厂Bean的id属性 factory-method属性指定工厂Bean的实例工厂方法 -->
	<bean id="chineseBean" factory-bean="personFactory"
		factory-method="getPerson">
		<!-- 调用工厂方法时，传入的参数通过constructor-arg元素指定 -->
		<constructor-arg value="chin" />
	</bean>
	<bean id="americanBean" factory-bean="personFactory"
		factory-method="getPerson">
		<constructor-arg value="ame" />
	</bean>

	<!-- 11 抽象Bean -->
	<!-- 通过abstract属性定义该Bean 是抽象Bean -->
	<bean id="chineseAbstract" class="com.webwalker.spring.impl.Chinese"
		abstract="true">
		<property name="axe" ref="steelAxe" />
	</bean>
	<!-- 通过parent属性定义子bean -->
	<bean id="chineseChild" parent="chineseAbstract">
		<!-- 覆盖父Bean中依赖关系的配置 -->
		<property name="axe" ref="stoneAxe" />
	</bean>

	<!-- 11 FactoryBean -->
	<!-- 配置一个FactoryBean，与配置普通Bean完全一样 -->
	<bean id="chineseSpecialFactoryBean" class="com.webwalker.spring.impl.SpecialPersonFactory" />

	<!-- 12生命周期 -->
	<!-- 配置chinese Bean，使用init-method="init" 指定该Bean所有属性设置完成后，自动执行init方法 -->
	<bean id="chineseLifecycle" class="com.webwalker.spring.impl.ChineseLifecycle"
		init-method="init" destroy-method="close">
		<property name="axe" ref="steelAxe" />
	</bean>

	<!-- 13 Bean依赖同步 -->
	<!-- 定义一个steelAxe实例，指定prototype的作用域 -->
	<bean id="steelAxeProtoType" class="com.webwalker.spring.impl.SteelAxe"
		scope="prototype" />
	<bean id="chineseSync" class="com.webwalker.spring.impl.ChineseAbstract">
		<!-- 指定getAxe方法返回steelAxe 每次调用getAxe方法将获取新的steelAxe对象 -->
		<lookup-method name="getAxe" bean="steelAxeProtoType" />
	</bean>
</beans>
